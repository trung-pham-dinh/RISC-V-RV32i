,,,INPUT,,,OUTPUT,,,,,,,,,,
Instruction,Name,Format,i_inst[30],i_inst[14:12],i_inst[6:2],o_imm_sel,o_reg_wen,o_br_un,is_br,is_jp,o_b_sel,o_a_sel,o_alu_sel,o_st_mem,o_wb_sel,
DontCare,,,?,???,?????,IMM_I,0,0,0,0,B_REG,A_REG,ALU_ADD,0,WB_ALU,
Width,,,1,3,5,IMMSEL_W,1,1,1,1,BSEL_W,ASEL_W,ALUSEL_W,1,WBSEL_W,
add,ADD,R,0,000,01100,*,1,*,0,0,B_REG,A_REG,ALU_ADD,0,WB_ALU,
sub,SUB,R,1,000,01100,*,1,*,0,0,B_REG,A_REG,ALU_SUB,0,WB_ALU,
xor,XOR,R,0,100,01100,*,1,*,0,0,B_REG,A_REG,ALU_XOR,0,WB_ALU,
or,OR,R,0,110,01100,*,1,*,0,0,B_REG,A_REG,ALU_OR,0,WB_ALU,
and,AND,R,0,111,01100,*,1,*,0,0,B_REG,A_REG,ALU_AND,0,WB_ALU,
sll,Shift Left Logical,R,0,001,01100,*,1,*,0,0,B_REG,A_REG,ALU_SLL,0,WB_ALU,
srl,Shift Right Logical,R,0,101,01100,*,1,*,0,0,B_REG,A_REG,ALU_SRL,0,WB_ALU,
sra,Shift Right Arith,R,1,101,01100,*,1,*,0,0,B_REG,A_REG,ALU_SRA,0,WB_ALU,
slt,Set Less Than,R,0,010,01100,*,1,*,0,0,B_REG,A_REG,ALU_SLT,0,WB_ALU,
sltu,Set Less Than Unsigned,R,0,011,01100,*,1,*,0,0,B_REG,A_REG,ALU_SLTU,0,WB_ALU,
addi,ADD Immediate,I,*,000,00100,IMM_I,1,*,0,0,B_IMM,A_REG,ALU_ADD,0,WB_ALU,
xori,XOR Immediate,I,*,100,00100,IMM_I,1,*,0,0,B_IMM,A_REG,ALU_XOR,0,WB_ALU,
ori,OR Immediate,I,*,110,00100,IMM_I,1,*,0,0,B_IMM,A_REG,ALU_OR,0,WB_ALU,
andi,AND Immediate,I,*,111,00100,IMM_I,1,*,0,0,B_IMM,A_REG,ALU_AND,0,WB_ALU,
slli,Shift Left Logical Immediate,I,0,001,00100,IMM_I,1,*,0,0,B_IMM,A_REG,ALU_SLL,0,WB_ALU,
srli,Shift Right Logical Immediate,I,0,101,00100,IMM_I,1,*,0,0,B_IMM,A_REG,ALU_SRL,0,WB_ALU,
srai,Shift Right Arith Immediate,I,1,101,00100,IMM_I,1,*,0,0,B_IMM,A_REG,ALU_SRA,0,WB_ALU,
slti,Set Less Than Immediate,I,*,010,00100,IMM_I,1,*,0,0,B_IMM,A_REG,ALU_SLT,0,WB_ALU,
sltiu,Set Less Than Immediate Unsigned,I,*,011,00100,IMM_I,1,*,0,0,B_IMM,A_REG,ALU_SLTU,0,WB_ALU,
lb,Load Byte,I,*,000,00000,IMM_I,1,*,0,0,B_IMM,A_REG,ALU_ADD,0,WB_MEM,
lh,Load Half,I,*,001,00000,IMM_I,1,*,0,0,B_IMM,A_REG,ALU_ADD,0,WB_MEM,
lw,Load Word,I,*,010,00000,IMM_I,1,*,0,0,B_IMM,A_REG,ALU_ADD,0,WB_MEM,
lbu,Load Byte Unsigned,I,*,100,00000,IMM_I,1,*,0,0,B_IMM,A_REG,ALU_ADD,0,WB_MEM,
lhu,Load Half Unsigned,I,*,101,00000,IMM_I,1,*,0,0,B_IMM,A_REG,ALU_ADD,0,WB_MEM,
sb,Store Byte,S,*,000,01000,IMM_S,0,*,0,0,B_IMM,A_REG,ALU_ADD,1,*,
sh,Store Half,S,*,001,01000,IMM_S,0,*,0,0,B_IMM,A_REG,ALU_ADD,1,*,
sw,Store Word,S,*,010,01000,IMM_S,0,*,0,0,B_IMM,A_REG,ALU_ADD,1,*,
beq,Branch ==,B,*,000,11000,IMM_B,0,*,1,0,B_IMM,A_PC,ALU_ADD,0,*,
bne,Branch !=,B,*,001,11000,IMM_B,0,*,1,0,B_IMM,A_PC,ALU_ADD,0,*,
blt,Branch <,B,*,100,11000,IMM_B,0,0,1,0,B_IMM,A_PC,ALU_ADD,0,*,
bge,Branch >=,B,*,101,11000,IMM_B,0,0,1,0,B_IMM,A_PC,ALU_ADD,0,*,
bltu,Branch < Unsigned,B,*,110,11000,IMM_B,0,1,1,0,B_IMM,A_PC,ALU_ADD,0,*,
bgeu,Branch >= Unsigned,B,*,111,11000,IMM_B,0,1,1,0,B_IMM,A_PC,ALU_ADD,0,*,
jal,Jump And Link,J,*,*,11011,IMM_J,1,*,0,1,B_IMM,A_PC,ALU_ADD,0,WB_PC,
jalr,Jump And Link Reg,I,*,000,11001,IMM_I,1,*,0,1,B_IMM,A_REG,ALU_ADD,0,WB_PC,
lui,Load Upper Immediate,U,*,*,01101,IMM_U,1,*,0,0,B_IMM,A_ZERO,ALU_ADD,0,WB_ALU,
auipc,Add Upper Immediate to PC,U,*,*,00101,IMM_U,1,*,0,0,B_IMM,A_PC,ALU_ADD,0,WB_ALU,
,,,,,,,,,,,,,,,,
